随着浏览器关闭 <script>var a = 10;</script> a这个变量就没了
下一次再访问的时候重新定义它 在内存中生成

1 只要有引号的就是字符串 比如”我们” “我” “12”  console.log(typeof a) 打印是string 说明a是字符串

2 + 左右都是数字就加 否则就是连字符   但是* - / % 就是来计算的 “4” 变成 4    true 为 1 

3 if(i<60){}else if(i<80){} 其实有两层含义 一点是 不满足上面的i<60 就是 i<80 && i>=60 并且只要满足其中一个 就会跳出所有if

var a 没有赋值 就是undefined  undefined加任何数 都是 NaN  NaN是number类型 

window.onload 表示页面加载完毕 (页面加载完毕表示:html ,样式 ,图片,段落加载完毕) 这个时候是可以获取到元素

页面没加载完毕的时候 菊花在转  页面加载完毕菊花消失

4 href=“javascript:;” 表示的是执行一个空的函数 和 href = “javascript:void(0);” 等价

href = “onclick = ‘fun()’” 要用单引号

数据的转换 String() Boolean() Number()  !!可以转为boolean  -*/可以把字符串转为 数字  

如果var i =“2” i++ 自动转换为 number类型  但是 i = i +1 依然是字符串类型 

“” 转为boolean 就是false 其他基本都是true

NAN: not a number
parseInt(110,2);
把二进制110 转换为 十进制

 false、undefined 、null、0、””  为 false 
 true、1、”somestring”、[Object]  为 true


java 和 javascript 的区别

int ppp = 21;
public void 呵呵(){
		System.out.println(ppp);
		int ppp = 32;
		System.out.println(ppp);
	}

java 里面 打印的是 21 32 而 javascript 打印的是 undefined 32 
主要原因是 javascript 里面产生了一个变量提升 
实际代码是这样了
int ppp;
System.out.println(ppp);
ppp = 32;
System.out.println(ppp);

所以javascript 会产生不一样的结果

记住一点 就是要知道执行顺序…这点不会错


var a ; 打印a 是undefined   打印 b 是Uncaught ReferenceError: a is not defined  打印a+b 是Uncaught ReferenceError: a is not defined

var a; var b = 1; 打印a + b 是 NAN ;

var a; var b; 打印 a+b 是NAN;

var a = b = c = 56; a是局部变量 bc是全局
var a,b = 221; ab是局部变量

document.write("<hr width = \"40%\">")
在html里面显示的是 <hr width = "40%">
document.write("<hr width = ’40%’>”)
在html里面显示的是 <hr width = "40%">
console.log("<hr width = \"40%\">") 打印的是 <hr width = "40%">
console.log("<hr width = ’40%’>”) 打印的是 <hr width = ’40%’>


input:button ==> <input type = “button”>